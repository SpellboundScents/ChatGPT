name: CI Build & Arch Package

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # If Rust project; adjust/remove if not using Rust.
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: |
          cargo build --release

      - name: Upload binary (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            target/release/*

  arch-pkg:
    name: Arch PKGBUILD
    runs-on: ubuntu-latest
    needs: build-linux
    container:
      image: archlinux:latest
      options: --privileged  # needed for makepkg in some environments
    steps:
      - name: Prepare pacman
        run: |
          sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git fakeroot curl binutils tar gzip jq
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Ensure version from tag (fallback to git describe)
        id: ver
        run: |
          TAG="${GITHUB_REF_NAME:-}"
          if [[ -z "$TAG" || "$TAG" != v* ]]; then
            TAG=$(git describe --tags --always --dirty 2>/dev/null || echo "v0.0.0")
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
      - name: Generate PKGBUILD if missing (Rust cargo template)
        run: |
          if [[ ! -f PKGBUILD ]]; then
            APP_NAME="$(basename "$(pwd)")"
            cat > PKGBUILD <<'EOF'
          # Maintainer: Your Name <you@example.com>
          pkgname=__APP_NAME__
          pkgver=__PKGVER__
          pkgrel=1
          pkgdesc="__DESC__"
          arch=('x86_64')
          url="__URL__"
          license=('MIT' 'Apache')
          depends=()
          makedepends=('rust' 'cargo')
          source=("git+__GIT_URL__#tag=v${pkgver}")
          md5sums=('SKIP')

          build() {
            cd "${srcdir}/${pkgname}"
            cargo build --release --locked
          }

          package() {
            cd "${srcdir}/${pkgname}"
            install -Dm755 "target/release/__BIN__" "${pkgdir}/usr/bin/__BIN__"
            # Optional: man page, completions, desktop files, icons...
            # install -Dm644 misc/__BIN__.1 "${pkgdir}/usr/share/man/man1/__BIN__.1"
          }
          EOF
            DESC="$(jq -r '.package.description? // empty' Cargo.toml 2>/dev/null || echo '')"
            BIN_NAME="$(jq -r '.bin[0].name? // empty' Cargo.toml 2>/dev/null)"
            [[ -z "$BIN_NAME" ]] && BIN_NAME="$(basename "$(pwd)")"
            sed -i "s|__APP_NAME__|$APP_NAME|g" PKGBUILD
            sed -i "s|__PKGVER__|${{ steps.ver.outputs.tag#v }}|g" PKGBUILD
            sed -i "s|__DESC__|${DESC:-$APP_NAME}|g" PKGBUILD
            sed -i "s|__URL__|${{ github.server_url }}/${{ github.repository }}|g" PKGBUILD
            sed -i "s|__GIT_URL__|${{ github.server_url }}/${{ github.repository }}.git|g" PKGBUILD
            sed -i "s|__BIN__|$BIN_NAME|g" PKGBUILD
          fi
      - name: Show PKGBUILD
        run: |
          echo "---- PKGBUILD ----"
          cat PKGBUILD
      - name: Build package with makepkg
        run: |
          useradd -m builder || true
          chown -R builder:builder .
          sudo -u builder bash -lc "
            export CARGO_HOME=\$HOME/.cargo
            mkdir -p \$CARGO_HOME
            # Install Rust toolchain inside container for build()
            pacman -S --noconfirm rust
            makepkg -sf --noconfirm --clean --cleanbuild
          "
      - name: Collect artifacts
        run: |
          ls -lah
          echo "PACKAGES:"
          ls -1 *.pkg.tar.* || true
      - name: Upload Arch package
        uses: actions/upload-artifact@v4
        with:
          name: arch-package
          path: "*.pkg.tar.*"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-linux, arch-pkg]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: arch-package
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: linux-binaries
          path: dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
