name: CI Build & Arch Package

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # If Rust project; adjust/remove if not using Rust.
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: |
          cargo build --release

      - name: Upload binary (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            target/release/*

  arch-pkg:
    runs-on: ubuntu-latest
    needs: build-linux
    container:
      image: archlinux:latest
      options: --privileged

    env:
      RUSTFLAGS: -Clink-arg=-fuse-ld=lld   # ðŸ‘ˆ force LLD for clang in Arch

    steps:
      - name: Prepare pacman
        run: |
          sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel rust cargo git jq binutils fakeroot lld
          # Tauri deps on Arch (names differ a bit)
          pacman -S --noconfirm webkit2gtk gtk3 libayatana-appindicator librsvg

      - name: Checkout repo
        uses: actions/checkout@v4

      # (Optional but robust) If your repo forces mold, rewrite it to lld
      - name: Override mold to lld if present
        run: |
          if [[ -f .cargo/config.toml ]]; then
            sed -i 's/fuse-ld=mold/fuse-ld=lld/g' .cargo/config.toml
          fi

      - name: Determine version and binary name (from Cargo)
        id: meta
        run: |
          VER="${GITHUB_REF_NAME:-}"
          if [[ -z "$VER" || "$VER" != v* ]]; then
            VER="0.0.0+$(git rev-parse --short HEAD)"
          else
            VER="${VER#v}"
          fi
          PKG_NAME="$(awk -F' *= *' '/^\[package\]/{f=1} f&&/^name *=/{gsub(/"/,"",$2); print $2; exit}' src-tauri/Cargo.toml)"
          echo "ver=$VER" >> $GITHUB_OUTPUT
          echo "pkg=$PKG_NAME" >> $GITHUB_OUTPUT
          echo "bin=$PKG_NAME" >> $GITHUB_OUTPUT

      - name: Generate PKGBUILD
        run: |
          cat > PKGBUILD <<'EOF'
          # Maintainer: CI <ci@example.invalid>
          pkgname=__PKGNAME__
          pkgver=__PKGVER__
          pkgrel=1
          pkgdesc="Tauri app"
          arch=('x86_64')
          url="https://github.com/__REPO__"
          license=('custom')
          depends=('gtk3' 'webkit2gtk' 'librsvg' 'libayatana-appindicator')
          makedepends=('rust' 'cargo' 'git' 'lld')
          source=()
          md5sums=()

          build() {
            cd "${srcdir}"
            RUSTFLAGS="-Clink-arg=-fuse-ld=lld" cargo build --manifest-path src-tauri/Cargo.toml --release --locked
          }

          package() {
            cd "${srcdir}"
            install -Dm755 "src-tauri/target/release/__BIN__" "${pkgdir}/usr/bin/__BIN__"
            install -Dm644 /dev/stdin "${pkgdir}/usr/share/applications/__BIN__.desktop" <<DESK
          [Desktop Entry]
          Type=Application
          Name=__PKGNAME__
          Exec=__BIN__
          Categories=Utility;
          Terminal=false
          DESK
          }
          EOF
          sed -i "s|__PKGNAME__|${{ steps.meta.outputs.pkg }}|g" PKGBUILD
          sed -i "s|__PKGVER__|${{ steps.meta.outputs.ver }}|g" PKGBUILD
          sed -i "s|__BIN__|${{ steps.meta.outputs.bin }}|g" PKGBUILD
          sed -i "s|__REPO__|${{ github.repository }}|g" PKGBUILD
          echo "---- PKGBUILD ----"; cat PKGBUILD

      - name: Build package with makepkg
        run: |
          useradd -m builder || true
          chown -R builder:builder .
          sudo -u builder bash -lc "
            export CARGO_HOME=\$HOME/.cargo
            mkdir -p \$CARGO_HOME
            makepkg -sf --noconfirm --clean --cleanbuild
          "

      - name: Upload Arch package
        uses: actions/upload-artifact@v4
        with:
          name: arch-package
          path: "*.pkg.tar.*"
        with:
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
