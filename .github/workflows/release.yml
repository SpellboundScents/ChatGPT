name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Put pnpm on PATH first (so setup-node's pnpm cache can find it)
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      # 1b) Safety net: if pnpm still isn't visible, install via npm
      - name: Ensure pnpm present
        shell: bash
        run: |
          set -euxo pipefail
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found after action-setup; installing via npm..."
            npm i -g pnpm@9
          fi
          which pnpm
          pnpm -v

      # 2) Now configure Node and enable pnpm cache
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # 3) Install JS deps
      - name: Install JS deps
        run: pnpm install --frozen-lockfile

      # 4) Rust & cache
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust target
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target

      # 5) Linux libs for WebKitGTK/Tauri
      - name: Install Linux deps for Tauri
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            build-essential \
            curl wget file \
            patchelf
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev

      # 6) Build (signed if secrets are set)
      - name: Build app
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: pnpm dlx @tauri-apps/cli@latest build


      # 7) Artifacts for manual/non-tag runs
      - name: Upload build artifacts (manual runs)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: tauri-bundles
          path: |
            src-tauri/target/release/bundle/**/*

      # 8) Release on tag
      - name: Create GitHub Release and upload artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
          fail_on_unmatched_files: false
          files: |
            src-tauri/target/release/bundle/**/*
            src-tauri/target/release/latest.json